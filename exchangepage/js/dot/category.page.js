// /thammue/public/js/dot/category.page.js
import { Kebab } from '../cards.kebab.js';

const API_BASE = '/exchangepage/api';

// ‡∏≠‡πà‡∏≤‡∏ô‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÉ‡∏´‡πâ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏ó‡∏±‡πâ‡∏á ?cat= ‡πÅ‡∏•‡∏∞ ?category_id=
function getQS() {
  const u = new URL(location.href);
  const cid = u.searchParams.get('cat') || u.searchParams.get('category_id');
  return {
    category_id: cid,
    q: u.searchParams.get('q'),
  };
}

// ‡∏´‡∏≤ "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î" ‡∏à‡∏≤‡∏Å CAT_MAP ‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏à‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ (‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏£‡∏≠‡∏á‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ô‡∏µ‡πâ)
function getCatName(id) {
  if (!id) return null;
  const mapFromPage = (window.__CAT_MAP__ || {});
  if (mapFromPage[id]) return mapFromPage[id];

  // ‡∏™‡∏≥‡∏£‡∏≠‡∏á (‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ‡∏•‡∏∑‡∏°‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ HTML)
  const FALLBACK = {
    1: '‡πÅ‡∏Æ‡∏ô‡πÄ‡∏°‡∏î',
    2: '‡∏Ç‡∏≠‡∏á‡∏õ‡∏£‡∏∞‡∏î‡∏¥‡∏©‡∏ê‡πå',
    3: '‡∏Ç‡∏≠‡∏á‡πÉ‡∏ä‡πâ‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ',
    4: '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡∏ú‡πâ‡∏≤',
    5: '‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠',
    6: '‡∏Ç‡∏≠‡∏á‡∏™‡∏∞‡∏™‡∏°'
  };
  return FALLBACK[id] || null;
}

function cardHtml(it) {
  const img = it.cover || (it.images && it.images[0]) || '../img/placeholder.png';
  const title = it.title || '';
  const id = it.id;
  const province = it.province || '';
  const catName = it.category_name || it.category || ''; // ‡∏à‡∏≤‡∏Å API ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
  const href = `detail.html?id=${encodeURIComponent(id)}&view=public`;
  const isOwner = it.is_owner === true;

  const menuHtml = isOwner
    ? `
      <button class="card-kebab__item" role="menuitem" data-action="edit" data-id="${id}">‚úèÔ∏è ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</button>
      <button class="card-kebab__item card-kebab__item--danger" role="menuitem" data-action="delete" data-id="${id}">üóëÔ∏è ‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤</button>
    `
    : `<button class="card-kebab__item" role="menuitem" data-action="report" data-id="${id}">üö© Report</button>`;

  return `
  <article class="card" data-card-id="${id}">
    <a class="stretched-link" href="${href}" aria-label="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î: ${title}"></a>

    <div class="card-kebab" data-id="${id}">
      <button class="card-kebab__btn" aria-haspopup="menu" aria-expanded="false" aria-controls="menu-${id}" title="‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°">
        <span class="dot"></span><span class="dot"></span><span class="dot"></span>
      </button>
      <div class="card-kebab__menu" id="menu-${id}" role="menu" hidden>
        ${menuHtml}
      </div>
    </div>

    <div class="thumb">
      ${img ? `<img src="${img}" alt="" style="width:100%;height:180px;object-fit:cover;border-radius:12px 12px 0 0;">` : ''}
    </div>
    <div class="card-body">
      <h3>${title}</h3>
      <p class="muted">‡∏´‡∏°‡∏ß‡∏î: ${catName || '-'} ${province ? ' ¬∑ ' + province : ''}</p>
      <a class="btn btn-sm" href="${href}">‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î</a>
    </div>
  </article>`;
}

// paging state
let LIMIT = 24;
let loaded = 0;
let isLoading = false;
let lastBatchCount = 0;

function buildQuery(params) {
  const sp = new URLSearchParams();
  sp.set('limit', LIMIT);
  if (params.category_id) sp.set('category_id', params.category_id);
  if (params.q) sp.set('q', params.q);
  if (loaded > 0) sp.set('offset', loaded); // API ‡∏à‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
  return `?${sp.toString()}`;
}

async function fetchAndRender(append = false) {
  if (isLoading) return;
  isLoading = true;

  const host = document.getElementById('catGrid');
  const btn = document.getElementById('loadMore');
  const qs = getQS();

  // ‡∏ï‡∏±‡πâ‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ "‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î" ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡πÄ‡∏•‡∏Ç
  const name = getCatName(qs.category_id);
  document.getElementById('catTitle').textContent =
    name ? `‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î: ${name}` : '‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';

  try {
    const res = await fetch(`${API_BASE}/items/list.php${buildQuery(qs)}`, { cache: 'no-store' });
    const data = await res.json();

    if (data?.ok && Array.isArray(data.items) && data.items.length) {
      const html = data.items.map(cardHtml).join('');
      host.innerHTML = append ? (host.innerHTML + html) : html;

      // bind ‡πÄ‡∏°‡∏ô‡∏π 3 ‡∏à‡∏∏‡∏î ‡∏´‡∏•‡∏±‡∏á render/append
      Kebab.bind('#catGrid');

      lastBatchCount = data.items.length;
      loaded += data.items.length;
      btn.hidden = !(lastBatchCount === LIMIT);
    } else {
      if (!append) host.innerHTML = '<p class="muted">‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÉ‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏ô‡∏µ‡πâ</p>';
      btn.hidden = true;
    }
  } catch {
    if (!append) host.innerHTML = '<p class="muted">‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á</p>';
    btn.hidden = true;
  } finally {
    isLoading = false;
  }
}

// ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
fetchAndRender(false);

// ‡πÇ‡∏´‡∏•‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°
document.getElementById('loadMore').addEventListener('click', () => fetchAndRender(true));

// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ action edit/delete/report ‡∏î‡πâ‡∏ß‡∏¢ event delegation
document.getElementById('catGrid').addEventListener('click', async (e) => {
  const itemBtn = e.target.closest('.card-kebab__item');
  if (!itemBtn) return;

  e.preventDefault();
  const action = itemBtn.dataset.action;
  const itemId = itemBtn.dataset.id;

  if (action === 'edit') {
    location.href = `edit.html?id=${encodeURIComponent(itemId)}`;
    return;
  }

  if (action === 'delete') {
    if (!confirm('‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ô‡∏µ‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?')) return;
    try {
      const r = await fetch(`${API_BASE}/items/delete.php`, {
        method: 'POST',
        headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' },
        body: new URLSearchParams({ id: String(itemId) })
      });
      const d = await r.json().catch(()=> ({}));
      if (d && d.ok) {
        document.querySelector(`.card[data-card-id="${itemId}"]`)?.remove();
      } else {
        alert('‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (d?.error || 'UNKNOWN'));
      }
    } catch {
      alert('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      Kebab.closeAll(document.getElementById('catGrid'));
    }
    return;
  }

  if (action === 'report') {
    const reason = prompt('‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤ (‡πÄ‡∏ä‡πà‡∏ô ‡∏™‡πÅ‡∏õ‡∏°, ‡∏ú‡∏¥‡∏î‡∏Å‡∏é‡∏´‡∏°‡∏≤‡∏¢, ‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°)');
    if (!reason) { Kebab.closeAll(document.getElementById('catGrid')); return; }
    try {
      const r = await fetch(`${API_BASE}/items/report.php`, {
        method: 'POST',
        headers: { 'Accept': 'application/json', 'Content-Type': 'application/x-www-form-urlencoded;charset=UTF-8' },
        body: new URLSearchParams({ id: String(itemId), reason })
      });
      const d = await r.json().catch(()=> ({}));
      if (d && d.ok) alert('‡∏™‡πà‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ ‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ä‡πà‡∏ß‡∏¢‡∏î‡∏π‡πÅ‡∏•‡∏ä‡∏∏‡∏°‡∏ä‡∏ô');
      else alert('‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ' + (d?.error || 'UNKNOWN'));
    } catch {
      alert('‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    } finally {
      Kebab.closeAll(document.getElementById('catGrid'));
    }
  }
});
